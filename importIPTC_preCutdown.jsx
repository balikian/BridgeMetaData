#target bridge// TODO tasks// errors only happen on first attempt to write to the files and during each write attempt we think.// fix "operation could not be completed" errors// I haven't been able to reproduce the errors with a new batch of images.// figure out which new data needs to go in and where this data will come from// Stacey is sending me a new spreadsheet file with ALL of their data one it// reconfigure data to new spreadsheet// add in new datavar LOG, logtype, ERROR;if( BridgeTalk.appName == "bridge" ) {	addInfo = new MenuElement("command", "Stacey's Import Metadata - Pre Cutdown", "at the end of Tools");}addInfo .onSelect = function () {// uncomment when live//   main();}// remove when livemain();function main() {	autowatch = 1;	inlets = 1;	var debugOn = true;	var txt = File.openDialog("Please select .txt file.","TXT File:*.txt");    var r = /[^\/]*$/;    var selectFilename = String(txt).split("/").pop().replace('.txt', '');    var selectPath = String(txt).replace(r, '');    var d = new Date();    // uncomment when live//    var timeStamp = d.getFullYear()+("0" + (d.getMonth() + 1)).slice(-2)+("0" + (d.getDate() + 1)).slice(-2)+d.getHours() + d.getMinutes();    var timeStamp = d.getFullYear()+("0" + (d.getMonth() + 1)).slice(-2)+("0" + (d.getDate())).slice(-2);    	var pwd = app.document.presentationPath;	var skippedFiles = [];    ERROR = new File(selectPath + "/" + selectFilename +"_ERRORS_"+timeStamp+".txt");    ERROR.open("w");    	LOG = new File(selectPath + "/" + "logfile_"+timeStamp+".txt");	LOG.open("w");    logit("START LOG")    logit("-------------------\n");	logit(txt);    logit(selectPath);    logit(selectFilename);    logit(timeStamp);	if(txt != null){		txt.open("r");		while(!txt.eof){	   		strInputLine = txt.readln();	   		if (strInputLine.length > 3) { // Make sure it isn't a blank line		  		strInputLine = strInputLine.replace(/\\/g,'/'); //Change backslash to forward slash.	   			inputArray  = strInputLine.split("\t");					inputArray[4] = processKeywords(inputArray[4]);					if(inputArray[0] != "") {						var txtFile = new File(pwd +"/" + inputArray[0] + '.jpg');						if(txtFile.exists){ //Check if file exists							writeMetadata(pwd, inputArray);						} else {                                for (item in inputArray) {                                    ERROR.write(inputArray[item]+"\t");                                }                                ERROR.write("\n");							skippedFiles.push(inputArray[0]);						}					}			}	   	}	}	var skippedFilesSorted = skippedFiles.sort();	var skipped;	if (skippedFilesSorted.length >0) {            logit("Import script has ended with the following skipped files: ", "error");		for (item in skippedFilesSorted) {            logit(skippedFilesSorted[item], "error");		}	} else {        		logit("Import script ended with no errors");	}	LOG.close();    ERROR.close();}function processKeywords (keywords) {	// replace semi-colons with a comma	keywords = keywords.replace(/;/g, ",");	var quoteTestFront = keywords.slice(0,1);	var quoteTestEnd = keywords.slice(keywords.length-1, keywords.length);	// removes ' or " in front of keywords	while ((quoteTestFront == "\"") || (quoteTestFront == "\'")) {		keywords = keywords.slice(1, keywords.length);		quoteTestFront = keywords.slice(0,1);	}	// removes ' or " at end of keywords	while ((quoteTestEnd == "\"") || (quoteTestEnd == "\'")) {		keywords = keywords.slice(0,keywords.length-1);		quoteTestEnd = keywords.slice(keywords.length-1, keywords.length);	}	// removes comma and space at end of keywords	var testEnd = keywords.slice(keywords.length-2, keywords.length);	if (testEnd == ', ') {		keywords = keywords.slice(0,keywords.length-2);	}	var keywordCutoff = '2500';		var chara = keywords.slice(keywordCutoff-1, keywordCutoff);		if (keywords.length > keywordCutoff) {			keywords = keywords.slice(0, keywordCutoff);			if (keywords.indexOf(",") > 0) {				while (chara != ',') {					chara = keywords.slice(keywords.length-1, keywords.length);					keywords = keywords.slice(0,-1);			}		}	}return keywords;}function writeMetadata(dir, dataArray){	var filename = dataArray[0];	var title = "";	var author = dataArray[1];	var description = "";	var keywords = dataArray[9];	var copyright = "";	var source = "";	item = new Thumbnail(dir + "/" + filename);	md =item.synchronousMetadata;	md.namespace = "http://purl.org/dc/elements/1.1/";	md.title = title;	// for some reason this changes the 'keywords' field	md.subject = keywords;	md.rights = copyright;md.namespace = "http://ns.adobe.com/photoshop/1.0/";// Sets Provider and Copyright Notice	md.Credit = source;// Sets Creator	md.Author = author;// Sets Descriptionmd.Caption = description;// remove Creator: Job Title if exists	md.AuthorsPosition = "";	md.Headline = "";	md.City = "frito";	md.State = "";	md.Country = "";	md.Instructions = "";	md.Source = "";// clear Job Identifier	md.TransmissionReference = "";// clear Description Writer	md.CaptionWriter = "";md.namespace = "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/";// Remove Creator Contact info if it existsmd.CiAdrCity = "";md.CiAdrCtry = "";md.CiAdrExtadr = "";md.CiAdrPcode = "";md.CiAdrRegion = "";md.CiEmailWork = "";md.CiTelWork = "";md.CiUrlWork = "";md.SubjectCode = "";md.IntellectualGenre = "";md.Scene = "";md.Location = "";md.CountryCode = "";}function logit(msg, logtype) {    if (logtype === undefined) {        logtype='info';     }    LOG.write(logtype.toUpperCase() + ': ' + msg);    LOG.write("\n");}